Внедрение зависимостей
Внедрение зависимостей - это шаблон, в котором объект - в данном случае функция - получает
переменную экземпляра, необходимую для дальнейшего выполнения функции.
В FastAPI зависимости внедреются путем объявления их в аргументах функции операции пути.
Мы использовали внедрение зависимостей в предыдущих главах. Вот пример из предыдущей главы, 
где мы извлекаем поле электронной почты из пользовательской модели, пререданной в функцию:

@user_router.post("/signup")
async def sign_user_up(user:User)->dict:
	user_exist = await User.find_one(User.email==user.email)

В этом блоке кода определенная зависимость - это класс модели User, который вводится в функцию 
sign_user_up(). Внедрив модель User в аргумент пользовательской функции, мы можем легко
получить атрибуты объекта.

Создани и использование зависимости
В FastAPI зависимость может быть определена либо как функция, либо как класс. Созданная
зависимость дает нам доступ к ее базовым значениям или методам, избавляя от необходимости
создавать эти объекты в наследующих их функциях. Внедрение зависимостей помогает
уменьшить повторение кода в некоторых случаях, например, при принудительной проверке
подлинности и авторизации.
Пример зависимости определяется следующим образом:

async def get_user(token:str):
	user = decode_token(token)
	return user

Это зависимость представляет собой функцию, которая принимает token в качестве аргумента и 
возвращает user параметр из внешней функции, decode_token. Чтобы использовать эту
зависимость, объявленный аргумент зависимой функции должен иметь параметр Depends, например:

from fastapi import Depends
@router.get("/user/me")
async get_user_details(user:User=Depends(get_user)):
	return user

Функция маршрута здесь зависит от функции get_user, которая служит ее зависимостью.
Это означает, что для доступа к предыдущему маршруту должна быть удовлетворена зависимость get_user.
Класс Depends, который импортируется из билиотеки FastAPI, отвечает за прием функции,
переданной в качестве аргумента, и выполнение ее при вызове конечной точки, автоматически делая
доступными для конечной точки, они возвращают значение переданной ей функции.

Теперь, когда у вас есть представление о том, как создается зависимость и как она используется,
давайте создадим зависимость аутентификации для приложения планировщика событий.