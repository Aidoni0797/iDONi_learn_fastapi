Настройка MongoDB
Существует ряд библиотек, которые позволяют нам интегрировать MongoDB в наше приложение
FastAPI. Однако мы будем использовать Beanie, асинхронную библиотеку Object Document Mapper 
(ODM), для выполнения операций с базой данных из нашего приложения.

Давайте установим библиотеку beanie, выполнив следующую команду:
(venv)$ pip install beanie

Прежде чем погрузиться в интеграцию, давайте рассмотрим некоторые методы из библиотек Beanie,
а также то, как создаются таблицы базы данных в этом разделе.

Документ
В SQL данные, хранящиеся в строках и столбцах, содержатся в таблице. В базе данных
NoSQL это называется документом. Документ представляет, как данные будут храниться в коллекции
базы данных. Документы определяются так же, как и модель Pydantic, за исключением того, что
вместо этого наследуется класс Document из библиотеки Beanie.

Пример документа определяется следующим образом:
from beanie import Document

class Event(Document):
	name:str
	location:str
	
	class Settings:
		name="events"

Подкласс Settings определен, чтобы указать библиотеке создать имя коллекции, переданное
в базе данных MongoDB.

Тепер, когда мы знаем, как создать документ, давайте рассмотрим методы, используемые для
выполнения CRUD операций:

- .insert() and .create(). Методы .insert() and .create() вызываются экземпляром документа
для создания документа для создания новой записи в базе данных. Вы также можете использовать 
метод .insert_one() для добавления отдельной записи в базу данных.

Чтобы вставить много записей в базу данных, вызывается метод .insert_many(), который принимает
список экземпляров документа, например:
event = Event(name="Packt office launch", location="Hybrid")
await event.create()
await Event.insert_one(event)


- .find() and .get(): Метод .find() используется для поиска списка документов, соответствующих
критериям поиска, переданным в качестве аргумента метода. Метод .get() используется для получения
одного документа.ю соответствующего предоставленному идентификатору. Отдельный документ, 
соответствующий критерию поиска, можно найти с помощью метода .find_one(), например следующего:

event = await Event.get("74478287284ff")
event = await Event.find(Event.location == "Hybrid").to_list() #Returns a list of maching items
event = await.find_one(Event.location == "Hybrid")
#Returns a single event

- .save(), update(), and .upsert(): Для обновления документа можно использовать любой из этих
методов. Метод .update() принимает запрос на обновление, а метод . upsert() используется,
когда документ не соответствует критериям поиска. В этой главе мы будем использовать метод
.update(). Запрос на обновление - это инструкция, за которой следует база данных MongoDB, 
например, следующая:

event - await Event.get("74478287284ff")
update_query = {"$set": {"location": "virtual"}}
await event.update(update_query)

В это блоке кода мы сначала извлекаем событие, а затем запрос на обновление, чтобы установить
для поля location в коллекции событий значение virtual.

- .delete(): Этот метод отвечает за удаление записи документа из базы данных, например:

event = await Event.get("74478287284ff")
await event.delete()

Теперь, когда мы узнали, как работают методы, содержащиеся в библиотеке Beanie, давайте
инициализируем базы данных в нашем приложении планировщика событий, определим наши документы
и реализуем CRUD операции.