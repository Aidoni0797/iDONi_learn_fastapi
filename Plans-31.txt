Создание приложения для планирования мероприятий

В этом разделе мы будем создавать приложение планировщика событий. В этом приложении 
зарегистрированные пользователи смогут создавать, обновлять и удалить события. Созданные
события можно просмотреть, перейдя на страницу события, автоматически созданную приложением.

Каждый зарегистрированный пользователь и событие будут иметь уникальный идентификатор.
Это сделано для предотвращения конфликтов при управлении пользователями и событиями с одним и 
тем же идентификатором. В этом разделе мы не будем отдавать приоритет аутентификации или управлению
базой данных, так как это будет подробно обсуждаться в Главе 6 Подключение к базе данных и
Главе 7 Защита приложений FastAPI

Чтобы начать разработку, давайте создадим виртуальную среду и активируем ее в каталоге нашего проекта
$python3 -m venv venv
$source venv/bin/activate

Далее давайте установим зависимости приложения:
(venv)$ pip install fastapi uvicorn "pydantic[email]"

Наконец, сохраните требования в requirements.txt

Теперь, когда мы успешно установили наши зависимости и настроили среду разработки, давайте
реализуем следующие модели приложения.

Реализация моделей
Давайте посмотрим на шаги для реализации нашей модели:
1. Первым шагом в создании нашего приложения является определение моделей для события и
пользоватлея. Модели описывают, как данные будут храниться, вводиться и представляться
в нашем приложении. На следующей диаграмме показано моделирование пользоваттеля и события,
а также их отношения:

Как показано на предыдущей диаграмме модели, у каждого пользователя будет поле Events,
представляющее собой событий, на которые он имеет право собственности.

2. Определим модель Event в odels/events.py

from pydantic import BaseModel
from typing import List

class Event(BaseModel):
	id:int
	title:str
	image:str
	description:str
	tags:List[str]
	location:str

3. Давайте определим подкласс Config в классе Event,чтобы показать пример того, как будут
выглядеть данные модели, когда мы посетим документацию:
class Config:
schema_extra = {
"example": {
"title": "FastAPI Book Launch",
"image": "https:
//linktomyimage.com/image.png",
"description": "We will be discussing
the contents of the FastAPI book in
this event. Ensure to come with your
own copy to win gifts!",
"tags": ["python", "fastapi", "book",
"launch"]
"location": "Google Meet"
}
}

Наша модель событий в первом блоке кода содержит пять полей:
-Название события
-Ссылка на баннер изображения события
-Описание события
-Теги событий для группировки
-Место проведения

Во втором блоке кода мы определяем пример данных события. Это направлено на то, чтобы направлять
нас при создании нового события из нашего API.

4. Теперь, когда мы определил нашу модель событий, давайте определим модель User:

from pydantic import BaseModel, EmailStr
from typing import Optional, List
from models.events import Event

class User(BaseModel):
	email: EmailStr
	password:str
	events:Optional[List[Event]]

Наша модель пользователя, определенная ранее, содержит следующие поля:
-Электронная почта пользователя
-Пароль пользователя
-Список событий, созданный пользователем, который по умолчанию пуст

5. Теперь, когда мы определили нашу модель User, давайте создадим пример, показывающий,
как храняться и устанавливаются пользовательские данные:

class Config:
	schema_extra = {
		"example":{
			"email": fastapi@packt.com,
			"username":"strong!!!"
			"events": [],
		}
	}
	
6. Далее мы создадим новую модель, NewUser, которая наследуется от модели User; это новая
модель будет использоваться в качестве типа данных при регистрации нового пользователя.
Модель User будет использоваться в качестве модели ответа, когда мы не хотим взаимодействовать с 
паролем, уменьшая объем работы, которую необходимо выполнить.

7. Наконец, давайте реализуем модель для входа пользователей в:

class UserSignIn(BaseModel):
	email:EmailStr
	password:str
		
	class Config:
		schema_extra={
			"example": {
				"email": fastapi@packt.com,
				"password":"strong!!!",
				"events": [],
			}
		}

Теперь, когда мы успешно реализовали наши модели, давайте реализуем маршруты в ледующем разделе.