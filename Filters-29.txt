Фильтры
Несмотря на сходство синтаксиса Python and Jinja, такие модификации, как объединение строк,
установка первого символа строки в верхний регистр и т.д., не могут быть выполнены с 
использованием синтаксиса Python in Jinja. Поэтому для выполнения таких модификаций у нас в
Jinja есть фильтры.

Фильтр отделяется от переменной вертикальной чертой (|)и может содержать необязательные 
аргументы в круглых скобках. Фильтр определяется в этом формате:
{{variable | filter_name(*args)}}
Если нет аргументов, определение становится следующим:
{{variable | filter_name}}
Давайте рассмотрим некоторые распространенные фильтры в следующих подразделах.

Фильтр по умолчанию
Переменная фильтра по умолчанию используется для замены вывода переданного значения,
если оно оказывается None:
{{todo.item|default('This is a default todo item')}}
This is a default todo item

Эвакуационный фильтр
Этот фильтр используется для отображения необработанного вывода HTML:
{{"<title>Todo Application</title>"|escape}}
<title>Todo Application</title>

Фильтры преобразования
Эти фильтры включают фильтры int и float, используемые для преобразования из одного типа
данный в другой:
{{3.142|int}}
3
{{31|float}}
31.0

Фильтр объединения
Этот фильтр используется для объединения элементов списка в строку, как в Python:
{{['Packt','produces','great','books!']|join(' ')}}
Packt produces great books!

Фильтры длины
Этот фильтр используется для возврата длины переданного объекта. Он выполняет ту же роль, что и 
len() in Python:

Todo count: {{todos|length}}
Todo count: 4

Примечнаие
Полный список фильтров и дополнительные сведения о фильтрах в Jinja см. на странице
https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters.

Использование операторов if
Использование операторов if in Jinja аналогично их использованию в Python. if операторы
используются в блоках управления {%%}. Давайте посмотрим на пример:
{%if todo |length<5%}
	You don't have much items on your todo list!
{%else%}
	You have a busy day it seems!
{%endif%}

Циклы
Мы также можем перебирать переменные в Jinja. Это может быть список или общая функция, например,
следующая:
{%for todo in todos%}
	<b>{{todo.item}}</b>
{%endfor%}

Вы можете получить доступ к специальным переменным внутри цикла for, таким как loop.index,
который дает индекс текущей итерации. Ниже приведен список специальных переменных и их
описания:

Variable     Description
loop.index - The current iteration of the loop(1 indexed)
loop.index0 - The current iteration of the loop (0 indexed)
loop.revindex - The number of iterations from the end of the loop (1 indexed)
loop.revindex0 - The number of iterations from the end of the loop (0 indexed)
loop.first - True if first iteration

loop.last - True if last iteration
loop.length - The number of items in the sequence
loop.cycle - A helper function to cycle between a list of sequences
loop.depth - Indicates how deep in a recursive loop the rendering currently is; starts at level 1
loop.depth0 - Indicates how deep in a recrucive loop the rendering currently is; starts at level 0
loop.previtem - The item from the previous iteration of the loop; underfined during the first iteration
loop.nextitem - The item from the following iteration of the loop; undefined during the last iteration
loop.changed(*val) - True if previously called with a different calue(or not called at all)

Макросы
Макрос в Jinja - это функция, которая возвращает строку HTML.
Основной вариант использования макросов - избежать повторения кода и вместо этого использовать 
один вызов функции. Например, макрос ввода определен для сокращения непрерывного опредения
тегов ввода в HTML-форме:
{%macro input(name, value='', type='text', size=20 %}
	<div class = "form">
		<input type="{{type}}" name="{{name}}" value="{{value|escape}}" size="{{size}}">
	</div>
{% endmacro %}

Теперь, чтобы быстро создать ввод в вашей форме, вызывается макрос:
{{input('item')}}

Это вернет следующее:
<div class="form">
	<input type="text" name ="item" value="" size="20">
</div>

Тепер, когда мы узнали, что такое макросы, мы приступим к изучению того, что такое наследование
шаблонов и как оно работает в FastAPI

Наследование шаблонов
Самая мощная функция Jinja - наследование шаблонов. Эта функция продвигает принцип "не повторяйся"(DRY)
и удобна в больших веб-приложениях.
Наследование шаблона - это ситуация, когда базовый шаблон определен, а дочерние шаблоны
могут взаимодействовать, наследовать и заменять определенные разделы базового шаблона.

Примечание
Вы можете узнать больше о наследовании шаблонов Jinja на
https://jinja.pallersprojects.com/en/3.0.x/templates/#template-inheritance.

Теперь, когда вы изучили основы синтаксиса Jinja, давайте научимся использовать шаблоны в
FastAPI в следующем разделе.