Создание и защита приложений FastAPI

По завершении этой части вы сможете создать полнофункциональное и безопасное приложение
с помощью FastAPI. В этой части используются знания, полученные в предыдущей части, и они
подкрепляются созданием более функционального приложения с более высокой сложностью,
чем приложение, созданное во второй главе. Вы также сможете интегрировать и подключаться к
базе данных SQL and NoSQL (MongoDB), а также сможете защитить приложение FastAPI к концу 
этой части.
Эта часть состоит из следующих глав:
Глава5. Структурирование приложений FastAPI
Глава6. Подключение к базе данных
Глава7. Защита приложений FastAPI

Структурирование приложений FastAPI
В последних четырех главах мы рассмотрели основные шаги, связанные с пониманием FastAPI и
созданием приложения FastAPI. Приложение, которое мы создали до сих пор, однофайловое
приложение todo, демонстрирующее гибкость и мощь FastAPI. Ключевым выводом из предыдущих
глав является простота создания приложения с использованием FastAPI. Однако необходимо 
правильно структурировать приложение с повышенное сложностью и функциональностью.

Структурирование относится к размещению компонентов приложения в организованном формате, который
может быть модульным для улучшения читабельности кода и содержимого приложения. Приложение
с правильной структурой обеспечивает более быструю разработку, более быструю отладку и общее
повышение производительности.

К концу этой главы вы будете владеть знаниями о том, что такое структурирование и как 
структурировать свой API. В этой главе вы затронете следующие темы:
- Структурирование маршрутов и моделей приложений
- Реализация моделей для API планировщика

Технические требования
Код, использованный в этой главе, можно найти по адресу:
https://github.com/PackPublishing/Building-Python-Web-APIs-with-FastAPI/tree/main/ch05/planner.

Структирование в приложениях FastAPI
В этой главе мы создадим планировщик событий. Давайте разработаем структуру приложения, чтобы
она выглядела так:
planner/
	main.py
	database/
		_init_.py
		connection.py
	routes/
		_init_.py
		events.py
		users.py
	models/
		_init_.py
		events.py
		users.py

Первый шаг - создать новую папку для приложения. Он будет называться планировщик:
$ mkdir planner && cd planner

Во вновь созданной папке планировщика, создайте файл ввода, main.py и три подпапки
-database, routes,  and models:
$touch main.py
$mkdir database routes models

Затем создайте _init_.py в каждой папке:
$touch {database, routes, models}/_init_.py

В папке database, давайте создадим пустой файл, database.py, который будет обрабатывать 
абстракции и конфигурации базы данных, которые мы будем использовать в следующей главе:
$touch database/connection.py

В папках routes and models, мы создадим два файла: events.py and users.py:
$touch {routes, models}/{events, users}.py

Каждый файл имеет свою функцию, как указано здесь:
Модули в пакете route:

events.py Этот модуль будет обрабатывать оперции маршрутизации, такие как создание, 
обновление и удаление событий.

users.py Этот модуль будет обрабатывать операции маршрутизации, такие как регистрация
и вход пользователей.

Модули в пакете models:

events.py Этот модуль будет содержать определение модели для операций с событиями.

users.py Это модуль будет содержать определение модели для пользовательских операций.

Теперь, когда мы успешно структурировали наш API и сгруппировали похожие по функциям файлы
в компоненты, давайте приступим к реализации приложения в следующем разделе.