Обновление событий

Давайте добавим маршрут UPDATE в routes/events.py

@event_router.put("/edit/{id}", response_model=Event)
async def update_event(id:int, new_data:EventUpdate, session=Depends(get_session))->Event:

В тело функции добавьте следующий блок кода, чтобы получить существующее событие и обработать
изменения события:

event = session.get(Event, id)
if event:
	event_data = new_data.dict(exclude_unset=True)
	for key, value in event_data.items():
		setattr(event, key, value)
	session.add(event)
	session.commit()
	session.refresh(event)
	
	return event
raise HTTPException(
	status_code=status.HTTP_404_NOT_FOUND,
	detail="Event with supplied ID does not exist"
)

В предыдущем блоке кода мы проверяем наличие события, прежде чем приступить к обновлению
данных события. После обновления события возвращаются обнавленные данные. Обновим
существующий заголовок статьи:

(venv)$ curl -X 'PUT' \
	'http://0.0.0.0:8080/event/edit/1'\
	-H 'accept: application/json'\
	-d '{
		"title": "Packt'\''s FastAPI book launch II"
	}'

{
	"id":1,
	"title": "Packt's FastAPI book launch II",
	"image": "fastapi-book.jpeg",
	"description": "The launch of the FastAPI book will hold on xyz."
	"tags": ["python", "fastapi"],
	"location": "virtual"
}
Теперь, когда мы добавили функцию обновления, давайте быстро добавим операцию удаления в
следующем разделе.