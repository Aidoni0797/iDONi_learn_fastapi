Защита приложений FastAPI

В предыдущей главе мы рассмотрели, как подключить приложение FastAPI к базе данных SQL and NoSQL.
Мы успешно реализовали методы базы данных и обновили существующие маршруты, чтобы обеспечить
взайимодействие между приложением и базой данных. Однако приложение планировщика по-прежнему
позволяет любому пользователю добавлять событие, а не только пользователям прошедшим проверку
подлинности. В этой главе мы защитим приложение с помощью JSON веб-токенах (JWT) и ограничим
некоторые операции с событиями только для аутентифицированных пользователей.
Защита приложения включает в себя дополнительные меры безопасности для ограничения доступа
к функциям приложения от неавторизованных лиц для предотварщения взлома или незаконных 
модификаций приложения. Аутентификация - это процесс проверки учетных данных, переданных объектом,
а авторизация просто означает предоставление объекту разрешения на выполнение определенных действий.
После проверки учетных данных объект получает право выполнять различные действия.
К концу этой главы вы сможете добавить уровень аутентификации в приложение FastAPI. В этой главе
объясняются процессы защиты паролей путем их хеширования, добавления уровня аутентификации и
защиты маршрутов от неавторизованных пользователей. В этой главе мы рассмотрим следующие темы:
-Методы аутентификации в FastAPI
-Защиты приложения с помощью OAuth2 and JWT
-Защита маршрутов с помощью внедрения зависимостей
-Настройка CORS
Технические требования
Чтобы продолжить, требуется компонент базы данных MongoDB. Процедуры установки для вашей
операционной системы можно найти в их официальной документации. Код, использованный в этой
главе, можно найти по адресу:
https://github.com/PacktPubliching/Building-Python-Web-APIs-with-FastAPI/tree/main/ch07/planner.

Методы аутентификации в FastAPI
В FastAPI доступно несолько методов аутентификации. FastAPI поддерживает распространенные 
методы аутентификации: базовую HTTP-аутентификацию, файлы cookie и аутентификацию на основе
токенов. Давайте кратко рассмотрим, что влечет за собой каждый метод:

- Базовая HTTP-аутентификация: В этом методе аутентификации учетные данные пользоватлея,
которые обычно представляют собой имя пользователя и пароль, отправлябтся через
HTTP-заголовок авторизации. Запрос, в свою очередь, возвращает заголовок WWW-Authenticate
содержащий, базовое значение и необязательный параметр области, который указывает ресурс,
к которому выполняется запрос аутентификации.
-Cookies: Файлы cookie используются, когда данные должны храниться на стороне клиента, например,
в веб-браузерах. Приложение FastAPI также могут использовать файлы cookie для хранения
пользовательских данных, которые могут быть получены сервером в целях аутентификации.
-Аутентификацию на основе токенов: Этот метод аутентификации включает использование токенов
безопасности, называемых токенами носителя. Эти токены отправляются вместе с клбчевым словом
Bearer в запросе заголовка авторизации. Наиболее часто используемым токеном являяется JWT,
который обычно представляет собой словарь, содержащий идентификатор пользователя и срок действия
токена.
Каждый из перечисленных здесь методов аутентификации имеет свои конкретные варианты использования,
а также свои плюсы и минусы. Однако в этой главе мы будем использовать аутентификацию по токену.
Методы аутентификации внедряются в приложения FastAPI в виде зависимостей, которые
вызываются во время выполнения. Это просто означает, что, когда методы аутентификации
определены, они бездействуют до тех пор, пока не будут внедрены в место их использования.
Это действие называется внедрением зависимостей.