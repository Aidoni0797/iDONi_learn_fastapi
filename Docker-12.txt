Ќастройка Docker

ѕо мере того, как наше приложение становитс€ многоуровневым, например, база данных,
объединение приложени€ в единый элемент позвол€ет нам развертывать наше приложение.
ћы будем использовать Docker дл€ контейнеризации уровней наших приложений в единый образ, 
который затем можно будет легко развернуть локально или в облаке.

 роме того, использование Dockerfile и файла docker-compose избавл€ет от необходимости загружать
образы наших приложений и делитьс€ ими. Ќовые версии наших приложений можно создавать из файла
Dockerfile и развертывать с помощью файла docker-compose. ќбразы приложений также можно хранить и 
извлекать из Docker Hub. Ёто известно, как операци€ толкани€ и выт€гивани€.

„тобы начать настройку, загрузите и установите Docker c
https://docs.docker.com/install.

Dockerfile

Dockerfile содержит инструкции о том, как должен быть создан образ нашего приложени€.
Ќиже приведен пример Dockerfile:

FROM PYTHON:3.8
# Set working directory to /usr/src/app
WORKDIR /usr/src//app
# Copy the contents of the current local directory into the container's working directory
ADD . /usr/src/app
# Run a command
CMD ["python", "hello.py"]

ƒалее мы создадим образ контейнера приложени€ и назовем getting_started следующим образом:

$ docker build -t getting_started .

≈сли Dockerfile отсутствует в каталоге, где запускаетс€ команда, путь к Dockerfile должен
быть правильно добавлен следующим образом:

$ docker build -t api api/Dockerfile

ќбраз контейнера можно запустить с помощью следующей команды:
$ docker run getting-started

Docker - эффективный инструмент дл€ контейнеризации. ћы рассмотрели только основные операции, 
и мы изучим больше практических операций в √лаве 9. –азвертывание приложений FastAPI.