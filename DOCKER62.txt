В последней главе вы узнали, как писать тесты для конечных точек API, созданных в приложении 
FastAPI. Мы начали с изучения того, что ознначает тестирование, и рассмотрели основы модульного
тестирования с использованием библиотеки pytest. Мы также рассмотрели, как ислючить повторение
и повторное использование тестовых компонентов с фикстурами, а зазтем приступили к настройке
нашей тестевой среды. Мы завершили последнюю главу, написав тесты для каждой конечной точки,
а затем протестировав их вместе с проверкой отчетов о покрытии тестами после тестирования.
В этой главе вы узнаете, как развернуть приложение FastAPI локально с помощью Docker
and docker-compose. Также добавлен краткий раздел с внешними ресурсами для развертывания
вашего приложения на бессерверных платформах по вашему выбору.
В этой главе мы рассмотрим следующие темы:
-Подготовка к развертыванию
-Развертывание с помощью Docker
-Развертывание обрахов Docker

Технические требования
Код, использованный в этой главе, можно найти по адресу
https://github.com/PacktPublishing/Building-Python-Web-APIs-with-FastAPI/tree/main/ch09/planner.

Подготовка к развертыванию
Развертывание обычно знаменует собой конец жизненного цикла приложения. Перед развертыванием наших
приложений мы должны убедиться, что установлены правильные параметры, необходимые для
плавного развертывания. Эти параметры включают обеспечение актуальности зависимостей
приложения в файле requirements.txt, настройку переменных среды и т.д.

Управление зависимостями
В нескольких предыдущих главах мы установили такие пакеты, как beanie и pytest. Эти пакеты
отсутствуют в файле requirements, который служит менеджером зависимостей для нашего приложения.
Важно, чтобы файл requirements.txt обновлялся.
В Python список пакетов, используемых в среде разработки, можно получить с помощью команды
pip freeze. Команда pip freeze возвращает список всех пакетов, установленных напрямую,
и зависимостей для каждого установленного пакета. К счастью, файл requirements.txt можно
поддерживать вручную, что позволяет нам перечислять только основные пакеты, тем самым
упрощая управление зависимостями.
Давайте перечислим зависимости, используемые приложением, прежде чем перезаписывать файл
requirements.txt:
(venv)$pip freeze
anyio==3.5.0
asgi-lifespan==1.0.1
asgiref==3.5.0
attrs==21.4.0
bcryot==3.2.2
cffi==1.15.0
python-multipart==0.0.5
...

Команда возвращает несколько зависимостей, некоторые из которых мы не используем напрямую
в приложении. Давайте вручную заполним файл requirements.txt пакетами, которые мы будем
использовать:
requirements.txt

fastapi==0.78.0
bcrypt==3.2.2
beanie==1.11.1
email-validator==1.2.1
httpx==0.22.0
Jinja2==3.0.3
motor==2.5.1
passlib==1.7.4
pytest==7.1.2
python-multipart==0.0.5
python-dotenv==0.20.0
python-jose==3.3.0
sqlmodel==0.0.6
uvicorn==0.14.6

В этом блоке кода мы заполнили файл requirements.txt зависимостями, используемыми непосредственно
в нашем приложении.

Настройка переменных среды

Мы использовали переменных среды
Мы использовали переменные среды в главе 6 "Подключение к базе данных". Переменные среды
могут быть введены во время развертывания, как мы увидим в следующем разделе.

Примечание
Важно отметить, что переменные среды должны правильно обрабатываться и храниться вне систем
контроля версий, таких как GitHub.

Теперь, когда мы выполнили необходимые шаги по подготовке к развертыванию, давайте
к локальному развертыванию нашего приложения с помощью Docker в следующем разделе.