Подключение к базе данных

В предыдущей главе мы рассмотрели, как структурировать приложение FastAPI. Мы успешно
реализовали некоторые маршруты и модели для нашего приложения и протестировали конечные точки.
Однако приложение по-прежнему использует внутреннюю базу данных для хранения событий.
В этой главе мы перенесем приложение для использования правильной базы данных.

Базу данных можно просто назвать хранилищем данных. В этом контексте база данных позволяет
нам хранить данные постоянно, в отличие от встроенной в приложение базы данных, которая
стирается при любом перезапуске или сбое приложения. База данных - это таблица, содержащая
столбцы, называемые полями, и строки, называемые записями.

К концу этой главы вы будете владеть знаниями о том, как подключить приложение FastAPI к базе
данных. В этой главе объясняется, как подключиться к базе данных SQL с использованием
SQLModel и базы данных MongoDB с помощью Beanie. (Однако в последующих главах приложение
будет использовать MongoDB в качестве основной базы данных.) В этой главе вы затронете следующие 
темы:
-Настройка SQLModel
-CRUD операции в базе данных SQL с использованием SQLModel
-Настройка MongoDB
-CRUD операции в MongoDB с помощью Beanie

Технические требования
Чтобы продолжить, требуется компонент базы данных MongoDB. Процедуры установки для вашей
операционной системы можно найти в их официальной документации. Код, использованный в этой
главе, можно найти по адресу
https://github.com/PactPublishing/Building-Python-Web-APIs-with-FastAPI/tree/main/ch06/planner.

Настройка SQLModel
Первым шагом для интеграции базы данных SQL в наше приложение планировщика является установка
библиотеки SQLModel. Библиотека SQLModel была создана создателем FastAPI и поддерживается
Pydantic and SQLAlchemy. Поддержка Pydantic упростит нам определение моделей, как мы
узнали из главы 3 "Модели ответов и обработка ошибок".

Поскольку мы будем реализовывать базы данных SQL and NoSQL, мы создадим новую ветку GitHub
для этого раздела. В своем терминале перейдите в каталог проекта, инициализируйте репозиторий 
GitHub и зафиксируйте существующие файлы:

$git init
$git add database models routes main.py
$git commit -m "Committing bare application without a database"

Далее создайте новую ветку:
$git checkout -b planner-sql

Теперь мы готовы настроить SQLModel в нашем приложении. В терминале активируйте виртуальную
среду и установите библиотеку SQLModel:
$source venv/bin/activate
(venv)$pip install sqlmodel

Прежде чем углубиться в добавление базы данных в наше приложение планировщика, давайте 
рассмотрим некоторые из методов, содержащихся в SQLModel, которые мы будем использовать
в этой главе.