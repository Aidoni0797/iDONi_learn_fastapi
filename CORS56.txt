Настройка CORS

Совместное использование ресурсов между источниками (CORS) служит правилом, которое 
предотвращает доступ незарегистрированных клиентов к ресурсу.

Когда наш веб-API используется внешним приложением, браузер не разрешает HTTP-запросы из разных
источников. Это означает, что доступ к ресурсам возможен только из точного источника, как API
или источников, разрешенных API.

FastAPI предоставляет CORS middleware, CORSMiddleware, которое позволяет нам регистрировать
домены, которые могут получить доступ к нашему API. Middleware принимает массив источников,
которым будет разрешен доступк ресурсам на сервере.

Что такое middleware?
Middleware - это функция, выступающая посредником между операциями. Веб-API middleware служит
посредником в операции запрос-ответ.

Например, чтобы разрешить доступ к нашему API только Packt, мы определяем URL-адреса в исходном
массиве:
origins = [
	'http://packtpub.com',
	'https://packtpub.com'
]

Чтобы разрешить запросы от любого клиента, массив origins будет содержать только одно значение
- звездочку(*). Звездочка - это подстановочный знак, который указывает нашему API разрешать
запросы из любого места.

В main.py астроим приложение так, чтобы оно принимало запросы отовсюду:

from fastapi.middleware.cors import CORSMiddleware

#register origins

origins = ["*"]

app.add_middleware(
	CORSMiddleware,
	allow_origins=origins,
	allow_credentials=True,
	allow_methods=["*"],
	allow_headers=["*"],
)

В приведенном выше блоке кода мы начали с импорта класса CORSMiddleware из FastAPI. 
Мы зарегистрировали промежуточное ПО в приложении с помощью метода add_middleware.

Дополнительная информация

Документация FastAPI содержит более подробную информацию о CORS-
https://fastapi.tiangolo.com/tutorial/cors

Мы успешно настроили наше приложение, чтобы разрешить запросы из любого источника во всемирной
паутине.

Резюме
В этой главе мы узнали, как защитить приложение FastAPI с помощью OAuth and JWT.
Мы также узнали, что такое внедрение зависимостей, как оно используется в приложениях
FastAPI и как защитить маршруты от неавторизованных пользователей. Мы также добавили промежуточное
ПО CORS, чтобы разрешить доступ к нашему API из любого клиента. Мы использовали знания из
предыдущих глав.

В следующей главе вы познакомитесь с тестированием вашего приложения FastAPI. Вы узнаете что 
такое тестирование приложения, почему вы должны тестировать приложения и как тестировать
приложение FastAPI.