Маршрутизация в FastAPI

Маршрутизация является важной частью создания веб-приложения. Маршрутизация в FastAPI 
гибкая и простая. Маршрутизация - это процесс обработки HTTP-запросов, отправляемых клиентом
на сервер. HTTP-запросы отправляются по определенным маршрутам, для которых определены
обработчики для обработки запросов и ответа. Эти обработчики называются обработчиками
маршрутов.

К концу этой главы вы будете знать, как создавать маршруты с использованием экземпляра 
APIRouter и подключаться к основному приложению FastAPI. Вы также узнаете, что такое модели
и как их использовать для проверки тела запроса. Вы также узнаете, что такое параметры пути и 
запроса и как их использовать в своем приложении FastAPI. Знание маршрутизации в FastAPI
необходимо при создании малых и больших приложений.

В этой главе мы рассмотрим следующие темы:
* Маршрутизация в FastAPI
* Класс APIRouter
* Валидация с использованием моделей Pydantic
* Путь и параметры запроса
* Тело запроса
* Создание простого CRUD приложения

Технические требования
Код, использованный в этой главе, можно найти на сайте
https://github.com/PacktPublishing/Building-Python-Web-APIs-with-FastAPI/tree/main/ch02/todos.

Понимание маршрутизации в FastAPI

Маршрут опредляется для приема запросов от метода HTTP-запроса и, при необходимости, для
получения параметров. Когда запрос отправляется на маршрут, приложение проверяет, определен ли
маршрут перед обработкой запроса в обработчике маршрута. С другой стороны, обработчик маршрута -
это функция, которая обрабатывает запрос, отправленный на сервер. Примером обработчика маршрута 
является функция, извлекающая записи из базы данных при отправке запроса на маршрутизатор через 
маршрут.

Что такое методы HTTP-запроса?
HTTP-методы - это идентификаторы для указания типа выполняемого действия. Стандартные методы
включают GET, POST, PUT, PATCH, and DELETE. Вы можете узнать больше о методах
HTTP на
https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods.

Пример маршрутизации

В разделе Скаффолдинг проекта в предыдущей главе мы создали приложение с одним маршрутом.
Маршрутизация была обработана экземпляром FastAPI() инициированным в переменной приложения:

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def welcome() -> dict:
	return {"message": "Hello World"}

Инструмент uvicorn был направлен на экземпляр FastAPI для обслуживания приложения:

(venv) $ uvicorn api:app --port 8080 --reload

Традиционный экземпляр FastAPI() может использоваться для операций маршрутизации,
как показано ранее. Однако этот метод обычно используется в приложениях, которым требуется
один путь во время маршрутизации. В ситуации, когда с помощью экземпляра FastAPI создается
отдельный маршрут, выполняющий уникальную функцию, приложение не сможет запустить оба маршрута,
так как uvicorn может запустить только однц точку входа.

Как же тогда вы справляетесь с обширными приложениями, которые требуют серии маршрутов,
выполняющих различные функции? В следующем разделе мы рассмотрим, как класс APIRouter
помогает с множественной маршрутизацией.