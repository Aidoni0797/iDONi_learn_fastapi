Развертывание с помощью Docker
В главе1 "Начало работы с FastAPI" вы понакомились с основами Docker and Dockerfile.
В этом разделе вы будете писать Dockerfile для API планировщика событий.

Docker - самая популярная технология, используемая для контейнеризации. Контейнеры - это
автономные системы, состоящие из пакетов, кода и зависимостей, которые позволяют им работать
в разных средах практически без зависимости от среды их выполнения. Docker использует
Dockerfiles для процесса контейнеризации.

Docker можно использовать как для локальной разработки, так и для развертывания приложений в
рабочей среде. В этой главе мы рассмотрим только локальное развертывание, а также будут
включены ссылки на официальные руководства по развертыванию в облачных службах.

Для управления приложениями с несколькими контейнерами, такими как контейнер приложения и 
контейнер базы данных, используется инструмент компоновки. Compose - это инструмент, используемый
для управления многоконтейнерными приложениями Docker, определенными в файле конфигурации,
обычно docker-compose.yaml. Инструмент компоновки, docker-compose, устанавливается вместе
с движком Docker.

Написание Dockerfile
Dockerfile содержит набор инструкций, используемых для создания образа Docker. Созданный
образ Docker затем можно распространять в реестры (частые и общедоступные), развертывать
на облачных серверах, таких как AWS and GoogleCloud, и использовать в разных
операционных системах путем создания контейнера.

Теперь, когда мы знаем, что делает Dockerfile, давайте создадим Dockerfile для 
сборки образа приложения. В каталоге проекта создайте файл Dockerfile:
(venv)$ touch Dockerfile

Dockerfile
From python:3.10

WORKDIR /app
COPY requirements.txt /app

RUN pip install --upgrade pip && pip install -r /app/ requirements.txt

EXPOSE 8080

COPY ./ /app

CMD ["python", "main.py"]

Давайте пройдемся по инструкциям, содержащимся в предыдущем файле Dockerfile, одну за другой:
- Первая инструкция, которую выполняет Dockerfile - установить базовый образ для нашего
собственного образа с помощью ключевого слова FROM. Другие варианты этого образа можно найти 
по адресу https://hub.docker.com/_/python.

-В следующей строке ключевое слово WORKDIR используется для задания рабочего каталога /app. Рабочий
каталог помогает организовать структуру проекта, построенного на образе.

-Затем мы копируем файл requirements.txt из локального каталога в рабочий каталог
контейнера  Docker, используя ключевое слово COPY.

- Следующая инструкция - это команда RUN, которая используется для обновления пакета pip
и последующей установки зависимостей из файла requirements.txt.

- Следующая команда предоставляет ПОРТ, через который к нашему приложению можно получить
доступ из локальной сетию

- Следующая команда копирует остальные файлы и папки в рабочий каталог контейнера Docker.

- Наконец, последняя команда запускает приложение с помощью команды CMD.

Каждый набор инструкций, перечисленных в Dockerfile, создается как отдельный уровень.
Docker выполняет интеллектуальную работу по кэшированию каждого слоя во время сборки,
стобы сократить время сборки и исключить повторение. Если слой, который по сути является инструкцией,
остается нетронутым, этот слой пропускается и используется ранее созданный. То есть Docker
использует систему кэширования при сбоорке образов.

Давайте создадим файл .dockkerignore, прежде чем приступить к сборке образа:

(venv)$ touch .dockerignore

.dockerignore
Venv
.env
.git

Что такое .dockerignore?
Файл .dockerignore содержит файлы и папки, которые должны быть исключены из инструкций,
определенных в файле Dockerfile.

