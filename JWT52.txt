Обработка аутентификации пользователя
Мы успешно внедрили компоненты для хеширования и сравнения паролей, а также компоненты для
создания и декодирования JWT. Давайте реализуем функцию зависимости, которая будет внедрена
в маршруты событий. Эта функция будет служить единственным источником правды для извлечения
пользователя для активного сеанса.

В auth/authenticate.py добавьте следующее:

from fastapi import Depnds, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from auth.jwt_handler import verify_access_token

oauth2_scheme = OAuth2PasswordBarer(tokenUrl="/user/signin")

async def authenticat(token:str=Depends(oauth2_scheme))->str:
	if not token:
		raise HTTPException(
			status_cod=status.HTTP_403_FORBIDDEN,
			detail="Sign in for access"
		)
	
	decoded_token = verify_access_token(token)
	return deecoded_token["user"]

В предыдущем блоке кода мы начинаем с импорта необходимых зависимостей:
-Depends: Это вводит oauth2_scheme в функцию в качестве зависимости.
-OAuth2PasswordBearer: Это класс сообщает приложению, что схема безопасности присутствует
-verify_access_token: Эта функция, определенная в разделе создания и проверки токена доступа,
будет использоваться для проверки действительности токена.

Затем мы определяем URL токена для схемы OAuth2 и функцию аутентификации. Функция аутентификации
принимает токен в качестве аргумента. В функцию в качестве зависимости внедрена схема OAuth.
Токен декодируется, и пользовательское поле полезной нагрзки возвращается, если токен 
действителен, в противном случае возвращаются адекватные ответы об ошибках, как определено
в функции verify_access_token.

Теперь, когда мы успешно создали зависимость для защиты маршрутов, давайте обновим поток
аутентификации в маршрутах, а также добавим функцию аутентификации в маршруты событий.