routes/events.py
НАчнем с обновления импорта и создания экземпляра database:

from beanie import PydanticObjectId
from fastapi import APIRouter, HTTPException, status
from database.connection import Database

from models.events import Event
from typing import List

event_database = Database(Event)

Имея импорт и экземпляр базы данных, давайте обновим все маршруты. НАчните с обновления
маршрутов GET:

@event_router.get("/", response_model=List[Event])
async def retrieve_all_events()->List[Event]:
	events = await event_database.get_all()
	return events

@event_router.get("/{id}", response_model=Event)
async def retrieve_event(id:PydanticObjectId)->Event:
	event = await event_database.get(id)
	if not event:
		raise HTTPException(
			status_code=status.HTTP_404_NOT_FOUND,
			detail="Event with supplied ID does not exist"
		)
	return event

В маршрутах GET мы вызываем методы, которые мы определили ранее в модуле базы данных.
Давайте обновим POST маршруты:

@event_router.post("/new")
async def create_event(body:Event)->dict:
	await evennt_database.save(body)
	return {
		"message": "Event created successfulle"
	}

Давайте создадим маршрут UPDATE:

@event_router.put("/{id}", response_model=Event)
async def update_event(id:PydanticObjectId, body:EventUpdate)->Event:
	update_event = await event_database.update(id, body)
	if not updates_event:
		raise HTTPExcption(
			status_code=status.HTTP_404_NOT_FOUND,
			detail="Event with supplied ID does not exist"
		)
	return updates_event

Наконец, давайте обновим маршрут DELETE:
@event_router.delete("/{id}")
async def delete_event(id:PydanticObjectId)->dict:
	event = await event_database.delete(id)
	if not event:
		raise HTTPException(
			status_code=status.HTTP_404_NOT_FOUND,
			detail="Event with supplied ID does not exist"
		)
	return {
		"message": "Event deleted successfully."
	}

Теперь, когда мы реализовали CRUD операции для наших маршрутов событий, давайте реализуем
маршруты для регистрации пользователя и входа пользователя.